/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <tf2_stocks>

#define TF_CLASS_DEMOMAN		4
#define TF_CLASS_ENGINEER		9
#define TF_CLASS_HEAVY			6
#define TF_CLASS_MEDIC			5
#define TF_CLASS_PYRO		    7
#define TF_CLASS_SCOUT			1
#define TF_CLASS_SNIPER			2
#define TF_CLASS_SOLDIER		3
#define TF_CLASS_SPY			8
#define TF_CLASS_UNKNOWN		0

#define TF_TEAM_BLU					3
#define TF_TEAM_RED					2

public Plugin:myinfo = 
{
	name = "Fight Club Freeze Tag Class Restrictions",
	author = "Andre Daenitz and Jason Kanagaratnam",
	description = "Restrict class choices for Freeze Tag",
	version = "1.0",
	url = "<- URL ->"
}

new g_iClass[MAXPLAYERS + 1];
new Handle:g_hEnabled;
new Handle:g_hLimits[4][10];
new String:g_sSounds[10][24] = {"", "vo/scout_no03.wav",   "vo/sniper_no04.wav", "vo/soldier_no01.wav",
																		"vo/demoman_no03.wav", "vo/medic_no03.wav",  "vo/heavy_no02.wav",
																		"vo/pyro_no01.wav",    "vo/spy_no02.wav",    "vo/engineer_no03.wav"};

public OnPluginStart()
{
	CreateConVar("sm_classrestrict_version", PL_VERSION, "Restrict classes in TF2.", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_REPLICATED|FCVAR_NOTIFY);
	g_hEnabled                                = CreateConVar("sm_classrestrict_enabled",       "1",  "Enable/disable restricting classes in TF2.");

	g_hLimits[TF_TEAM_BLU][TF_CLASS_DEMOMAN]  = 0;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_ENGINEER] = 0;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_HEAVY]    = 0;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_MEDIC]    = 0;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_PYRO]     = 0;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_SCOUT]    = -1;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_SNIPER]   = 0;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_SOLDIER]  = 0;
	g_hLimits[TF_TEAM_BLU][TF_CLASS_SPY]      = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_DEMOMAN]  = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_ENGINEER] = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_HEAVY]    = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_MEDIC]    = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_PYRO]     = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_SCOUT]    = -1;
	g_hLimits[TF_TEAM_RED][TF_CLASS_SNIPER]   = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_SOLDIER]  = 0;
	g_hLimits[TF_TEAM_RED][TF_CLASS_SPY]      = 0;
	
	HookEvent("player_changeclass", Event_PlayerClass);
	HookEvent("player_spawn",       Event_PlayerSpawn);
	HookEvent("player_team",        Event_PlayerTeam);
}

public OnMapStart()
{
	decl i, String:sSound[32];
	for(i = 1; i < sizeof(g_sSounds); i++)
	{
		Format(sSound, sizeof(sSound), "sound/%s", g_sSounds[i]);
		PrecacheSound(g_sSounds[i]);
		AddFileToDownloadsTable(sSound);
	}
}

public OnClientPutInServer(client)
{
	g_iClass[client] = TF_CLASS_UNKNOWN;
}

public Event_PlayerClass(Handle:event, const String:name[], bool:dontBroadcast)
{
	new iClient = GetClientOfUserId(GetEventInt(event, "userid")),
			iClass  = GetEventInt(event, "class"),
			iTeam   = GetClientTeam(iClient);
	
	if(IsFull(iTeam, iClass))
	{
		ShowVGUIPanel(iClient, iTeam == TF_TEAM_BLU ? "class_blue" : "class_red");
		EmitSoundToClient(iClient, g_sSounds[iClass]);
		TF2_SetPlayerClass(iClient, TFClassType:g_iClass[iClient]);
	}
}


public Event_PlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	new iClient = GetClientOfUserId(GetEventInt(event, "userid")),
			iTeam   = GetClientTeam(iClient);
	
	if(IsFull(iTeam, (g_iClass[iClient] = _:TF2_GetPlayerClass(iClient))))
	{
		ShowVGUIPanel(iClient, iTeam == TF_TEAM_BLU ? "class_blue" : "class_red");
		EmitSoundToClient(iClient, g_sSounds[g_iClass[iClient]]);
		PickClass(iClient);
	}
}

public Event_PlayerTeam(Handle:event,  const String:name[], bool:dontBroadcast)
{
	new iClient = GetClientOfUserId(GetEventInt(event, "userid")),
			iTeam   = GetEventInt(event, "team");
			
	
	if(IsFull(iTeam, g_iClass[iClient]))
	{
		ShowVGUIPanel(iClient, iTeam == TF_TEAM_BLU ? "class_blue" : "class_red");
		EmitSoundToClient(iClient, g_sSounds[g_iClass[iClient]]);
		PickClass(iClient);
	}
}

bool:IsFull(iTeam, iClass)
{
	new iBluMedics = GetTeamClientCount(TF_TEAM_BLU) / 3;
	new iRedMedics = GetTeamClientCount(TF_TEAM_RED) / 3;
	
	if(iBluMedics > iRedMedics)
	{
		g_hLimits[TF_TEAM_BLU][TF_CLASS_MEDIC] = iBluMedics;
		g_hLimits[TF_TEAM_RED][TF_CLASS_MEDIC] = iBluMedics;
	}
	else
	{
		g_hLimits[TF_TEAM_BLU][TF_CLASS_MEDIC] = iRedMedics;
		g_hLimits[TF_TEAM_RED][TF_CLASS_MEDIC] = iRedMedics;
	}

	// If plugin is disabled, or team or class is invalid, class is not full
	if(!GetConVarBool(g_hEnabled) || iTeam < TF_TEAM_RED || iClass < TF_CLASS_SCOUT)
		return false;
	
	if(iClass != TF_CLASS_MEDIC || iClass != TF_CLASS_SCOUT)
		return true;
	
	// If limit is -1, class is not full
	if(iLimit == -1)
		return false;
	// If limit is 0, class is full
	else if(iLimit == 0)
		return true;
	
	// Loop through all clients
	for(new i = 1, iCount = 0; i <= MaxClients; i++)
	{
		// If client is in game, on this team, has this class and limit has been reached, class is full
		if(IsClientInGame(i) && GetClientTeam(i) == iTeam && _:TF2_GetPlayerClass(i) == iClass && ++iCount > iLimit)
			return true;
	}
	
	return false;
}

PickClass(iClient)
{
	TF2_SetPlayerClass(iClient, TFClassType:1);
	TF2_RespawnPlayer(iClient);
}